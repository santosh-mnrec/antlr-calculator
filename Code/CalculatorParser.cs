//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\compiler\Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, DOUBLE=2, PI=3, E=4, POW=5, NL=6, WS=7, ID=8, PLUS=9, EQUAL=10, 
		MINUS=11, MULT=12, DIV=13, LPAR=14, RPAR=15;
	public const int
		RULE_input = 0, RULE_setVar = 1, RULE_plusOrMinus = 2, RULE_multOrDiv = 3, 
		RULE_pow = 4, RULE_unaryMinus = 5, RULE_atom = 6;
	public static readonly string[] ruleNames = {
		"input", "setVar", "plusOrMinus", "multOrDiv", "pow", "unaryMinus", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'pi'", "'e'", "'^'", "'\n'", null, null, "'+'", "'='", 
		"'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "DOUBLE", "PI", "E", "POW", "NL", "WS", "ID", "PLUS", "EQUAL", 
		"MINUS", "MULT", "DIV", "LPAR", "RPAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CalculateContext : InputContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CalculatorParser.Eof, 0); }
		public ITerminalNode NL() { return GetToken(CalculatorParser.NL, 0); }
		public CalculateContext(InputContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalculate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToSetVarContext : InputContext {
		public SetVarContext setVar() {
			return GetRuleContext<SetVarContext>(0);
		}
		public ITerminalNode NL() { return GetToken(CalculatorParser.NL, 0); }
		public InputContext input() {
			return GetRuleContext<InputContext>(0);
		}
		public ToSetVarContext(InputContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToSetVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new ToSetVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 14; setVar();
				State = 15; Match(NL);
				State = 16; input();
				}
				break;
			case 2:
				_localctx = new CalculateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; plusOrMinus(0);
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 19; Match(NL);
					}
				}

				State = 22; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarContext : ParserRuleContext {
		public SetVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVar; } }
	 
		public SetVarContext() { }
		public virtual void CopyFrom(SetVarContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetVariableContext : SetVarContext {
		public ITerminalNode ID() { return GetToken(CalculatorParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(CalculatorParser.EQUAL, 0); }
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public SetVariableContext(SetVarContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVarContext setVar() {
		SetVarContext _localctx = new SetVarContext(Context, State);
		EnterRule(_localctx, 2, RULE_setVar);
		try {
			_localctx = new SetVariableContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(ID);
			State = 27; Match(EQUAL);
			State = 28; plusOrMinus(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOrMinusContext : ParserRuleContext {
		public PlusOrMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOrMinus; } }
	 
		public PlusOrMinusContext() { }
		public virtual void CopyFrom(PlusOrMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ToMultOrDivContext : PlusOrMinusContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ToMultOrDivContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToMultOrDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(CalculatorParser.PLUS, 0); }
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public PlusContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusContext : PlusOrMinusContext {
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(CalculatorParser.MINUS, 0); }
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public MinusContext(PlusOrMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOrMinusContext plusOrMinus() {
		return plusOrMinus(0);
	}

	private PlusOrMinusContext plusOrMinus(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PlusOrMinusContext _localctx = new PlusOrMinusContext(Context, _parentState);
		PlusOrMinusContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_plusOrMinus, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToMultOrDivContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 31; multOrDiv(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 41;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 39;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new PlusContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 33;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 34; Match(PLUS);
						State = 35; multOrDiv(0);
						}
						break;
					case 2:
						{
						_localctx = new MinusContext(new PlusOrMinusContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_plusOrMinus);
						State = 36;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 37; Match(MINUS);
						State = 38; multOrDiv(0);
						}
						break;
					}
					} 
				}
				State = 43;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOrDivContext : ParserRuleContext {
		public MultOrDivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOrDiv; } }
	 
		public MultOrDivContext() { }
		public virtual void CopyFrom(MultOrDivContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicationContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ITerminalNode MULT() { return GetToken(CalculatorParser.MULT, 0); }
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public MultiplicationContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : MultOrDivContext {
		public MultOrDivContext multOrDiv() {
			return GetRuleContext<MultOrDivContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(CalculatorParser.DIV, 0); }
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public DivisionContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToPowContext : MultOrDivContext {
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public ToPowContext(MultOrDivContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToPow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOrDivContext multOrDiv() {
		return multOrDiv(0);
	}

	private MultOrDivContext multOrDiv(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultOrDivContext _localctx = new MultOrDivContext(Context, _parentState);
		MultOrDivContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_multOrDiv, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ToPowContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 45; pow();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 55;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 53;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 47;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 48; Match(MULT);
						State = 49; pow();
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new MultOrDivContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_multOrDiv);
						State = 50;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 51; Match(DIV);
						State = 52; pow();
						}
						break;
					}
					} 
				}
				State = 57;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PowContext : ParserRuleContext {
		public PowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pow; } }
	 
		public PowContext() { }
		public virtual void CopyFrom(PowContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PowerContext : PowContext {
		public UnaryMinusContext unaryMinus() {
			return GetRuleContext<UnaryMinusContext>(0);
		}
		public ITerminalNode POW() { return GetToken(CalculatorParser.POW, 0); }
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public PowerContext(PowContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPower(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowContext pow() {
		PowContext _localctx = new PowContext(Context, State);
		EnterRule(_localctx, 8, RULE_pow);
		try {
			_localctx = new PowerContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; unaryMinus();
			State = 61;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 59; Match(POW);
				State = 60; pow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryMinusContext : ParserRuleContext {
		public UnaryMinusContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryMinus; } }
	 
		public UnaryMinusContext() { }
		public virtual void CopyFrom(UnaryMinusContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ChangeSignContext : UnaryMinusContext {
		public ITerminalNode MINUS() { return GetToken(CalculatorParser.MINUS, 0); }
		public UnaryMinusContext unaryMinus() {
			return GetRuleContext<UnaryMinusContext>(0);
		}
		public ChangeSignContext(UnaryMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeSign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ToAtomContext : UnaryMinusContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ToAtomContext(UnaryMinusContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryMinusContext unaryMinus() {
		UnaryMinusContext _localctx = new UnaryMinusContext(Context, State);
		EnterRule(_localctx, 10, RULE_unaryMinus);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				_localctx = new ChangeSignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; Match(MINUS);
				State = 64; unaryMinus();
				}
				break;
			case INT:
			case DOUBLE:
			case PI:
			case E:
			case ID:
			case LPAR:
				_localctx = new ToAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstantPIContext : AtomContext {
		public ITerminalNode PI() { return GetToken(CalculatorParser.PI, 0); }
		public ConstantPIContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantPI(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : AtomContext {
		public ITerminalNode ID() { return GetToken(CalculatorParser.ID, 0); }
		public VariableContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracesContext : AtomContext {
		public ITerminalNode LPAR() { return GetToken(CalculatorParser.LPAR, 0); }
		public PlusOrMinusContext plusOrMinus() {
			return GetRuleContext<PlusOrMinusContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(CalculatorParser.RPAR, 0); }
		public BracesContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraces(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantEContext : AtomContext {
		public ITerminalNode E() { return GetToken(CalculatorParser.E, 0); }
		public ConstantEContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleContext : AtomContext {
		public ITerminalNode DOUBLE() { return GetToken(CalculatorParser.DOUBLE, 0); }
		public DoubleContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : AtomContext {
		public ITerminalNode INT() { return GetToken(CalculatorParser.INT, 0); }
		public IntContext(AtomContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 12, RULE_atom);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PI:
				_localctx = new ConstantPIContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; Match(PI);
				}
				break;
			case E:
				_localctx = new ConstantEContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; Match(E);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; Match(DOUBLE);
				}
				break;
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 71; Match(INT);
				}
				break;
			case ID:
				_localctx = new VariableContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 72; Match(ID);
				}
				break;
			case LPAR:
				_localctx = new BracesContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 73; Match(LPAR);
				State = 74; plusOrMinus(0);
				State = 75; Match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return plusOrMinus_sempred((PlusOrMinusContext)_localctx, predIndex);
		case 3: return multOrDiv_sempred((MultOrDivContext)_localctx, predIndex);
		}
		return true;
	}
	private bool plusOrMinus_sempred(PlusOrMinusContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multOrDiv_sempred(MultOrDivContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'R', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x17', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x1B', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '*', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		'-', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '\x38', '\n', '\x5', '\f', '\x5', '\xE', '\x5', ';', '\v', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '@', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x45', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'P', 
		'\n', '\b', '\x3', '\b', '\x2', '\x4', '\x6', '\b', '\t', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x2', '\x2', '\x2', 'W', '\x2', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ' ', '\x3', '\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', 
		'\x2', '\n', '<', '\x3', '\x2', '\x2', '\x2', '\f', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'O', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', 
		'\x5', '\x4', '\x3', '\x2', '\x11', '\x12', '\a', '\b', '\x2', '\x2', 
		'\x12', '\x13', '\x5', '\x2', '\x2', '\x2', '\x13', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x16', '\x5', '\x6', '\x4', '\x2', '\x15', '\x17', 
		'\a', '\b', '\x2', '\x2', '\x16', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\a', '\x2', '\x2', '\x3', '\x19', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x14', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1D', '\a', '\n', '\x2', '\x2', '\x1D', '\x1E', 
		'\a', '\f', '\x2', '\x2', '\x1E', '\x1F', '\x5', '\x6', '\x4', '\x2', 
		'\x1F', '\x5', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\b', '\x4', '\x1', 
		'\x2', '!', '\"', '\x5', '\b', '\x5', '\x2', '\"', '+', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\f', '\x5', '\x2', '\x2', '$', '%', '\a', '\v', 
		'\x2', '\x2', '%', '*', '\x5', '\b', '\x5', '\x2', '&', '\'', '\f', '\x4', 
		'\x2', '\x2', '\'', '(', '\a', '\r', '\x2', '\x2', '(', '*', '\x5', '\b', 
		'\x5', '\x2', ')', '#', '\x3', '\x2', '\x2', '\x2', ')', '&', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '\a', '\x3', 
		'\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\b', 
		'\x5', '\x1', '\x2', '/', '\x30', '\x5', '\n', '\x6', '\x2', '\x30', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\f', '\x5', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\xE', '\x2', '\x2', '\x33', '\x38', '\x5', '\n', 
		'\x6', '\x2', '\x34', '\x35', '\f', '\x4', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\xF', '\x2', '\x2', '\x36', '\x38', '\x5', '\n', '\x6', '\x2', 
		'\x37', '\x31', '\x3', '\x2', '\x2', '\x2', '\x37', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', 
		'\t', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'<', '?', '\x5', '\f', '\a', '\x2', '=', '>', '\a', '\a', '\x2', '\x2', 
		'>', '@', '\x5', '\n', '\x6', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\r', '\x2', '\x2', '\x42', '\x45', '\x5', 
		'\f', '\a', '\x2', '\x43', '\x45', '\x5', '\xE', '\b', '\x2', '\x44', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\r', '\x3', '\x2', '\x2', '\x2', '\x46', 'P', '\a', '\x5', 
		'\x2', '\x2', 'G', 'P', '\a', '\x6', '\x2', '\x2', 'H', 'P', '\a', '\x4', 
		'\x2', '\x2', 'I', 'P', '\a', '\x3', '\x2', '\x2', 'J', 'P', '\a', '\n', 
		'\x2', '\x2', 'K', 'L', '\a', '\x10', '\x2', '\x2', 'L', 'M', '\x5', '\x6', 
		'\x4', '\x2', 'M', 'N', '\a', '\x11', '\x2', '\x2', 'N', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'O', '\x46', '\x3', '\x2', '\x2', '\x2', 'O', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'H', '\x3', '\x2', '\x2', '\x2', 'O', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'J', '\x3', '\x2', '\x2', '\x2', 'O', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'P', '\xF', '\x3', '\x2', '\x2', '\x2', '\v', '\x16', 
		'\x1A', ')', '+', '\x37', '\x39', '?', '\x44', 'O',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
