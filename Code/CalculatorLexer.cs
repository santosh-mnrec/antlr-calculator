//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\compiler\Calculator.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CalculatorLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, DOUBLE=2, PI=3, E=4, POW=5, NL=6, WS=7, ID=8, PLUS=9, EQUAL=10, 
		MINUS=11, MULT=12, DIV=13, LPAR=14, RPAR=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "DOUBLE", "PI", "E", "POW", "NL", "WS", "ID", "PLUS", "EQUAL", 
		"MINUS", "MULT", "DIV", "LPAR", "RPAR"
	};


	public CalculatorLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CalculatorLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'pi'", "'e'", "'^'", "'\n'", null, null, "'+'", "'='", 
		"'-'", "'*'", "'/'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "DOUBLE", "PI", "E", "POW", "NL", "WS", "ID", "PLUS", "EQUAL", 
		"MINUS", "MULT", "DIV", "LPAR", "RPAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', 'V', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x6', '\x2', '#', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '$', 
		'\x3', '\x3', '\x6', '\x3', '(', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		')', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '.', '\n', '\x3', '\r', 
		'\x3', '\xE', '\x3', '/', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x6', '\b', '<', '\n', '\b', '\r', '\b', '\xE', '\b', '=', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x44', 
		'\n', '\t', '\f', '\t', '\xE', '\t', 'G', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', 
		'\xF', '\x1D', '\x10', '\x1F', '\x11', '\x3', '\x2', '\x6', '\x3', '\x2', 
		'\x32', ';', '\x5', '\x2', '\v', '\v', '\xF', '\xF', '\"', '\"', '\x5', 
		'\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', 
		';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x2', 'Z', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x3', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x34', '\x3', '\x2', '\x2', '\x2', '\v', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\xF', ';', '\x3', '\x2', '\x2', '\x2', '\x11', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x13', 'H', '\x3', '\x2', '\x2', '\x2', '\x15', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\x17', 'L', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'N', '\x3', '\x2', '\x2', '\x2', '\x1B', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', 'R', '\x3', '\x2', '\x2', '\x2', '\x1F', 'T', '\x3', '\x2', '\x2', 
		'\x2', '!', '#', '\t', '\x2', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '&', '(', '\t', '\x2', '\x2', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '\'', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', '-', '\a', '\x30', '\x2', '\x2', 
		',', '.', '\t', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', 'r', '\x2', '\x2', '\x32', '\x33', 
		'\a', 'k', '\x2', '\x2', '\x33', '\b', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', 'g', '\x2', '\x2', '\x35', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x37', '\a', '`', '\x2', '\x2', '\x37', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\f', '\x2', '\x2', '\x39', '\xE', '\x3', 
		'\x2', '\x2', '\x2', ':', '<', '\t', '\x3', '\x2', '\x2', ';', ':', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\b', '\b', '\x2', '\x2', '@', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x45', '\t', '\x4', '\x2', '\x2', 
		'\x42', '\x44', '\t', '\x5', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x12', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\a', '-', '\x2', '\x2', 'I', '\x14', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\a', '?', '\x2', '\x2', 'K', '\x16', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\a', '/', '\x2', '\x2', 'M', '\x18', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\a', ',', '\x2', '\x2', 'O', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'Q', '\a', '\x31', '\x2', '\x2', 'Q', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'S', '\a', '*', '\x2', '\x2', 'S', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'U', '\a', '+', '\x2', '\x2', 'U', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x2', '$', ')', '/', '=', '\x45', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
